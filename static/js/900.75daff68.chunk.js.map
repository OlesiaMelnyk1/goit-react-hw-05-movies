{"version":3,"file":"static/js/900.75daff68.chunk.js","mappings":"+PACA,EAA2B,uBAA3B,EAAkE,4BAAlE,EAAwG,sBAAxG,EAA8I,4BAA9I,EAAqL,uB,SC0DrL,EAlDa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,sGAEnBJ,GAAa,GAFM,UAGIK,EAAAA,EAAAA,IAAiBR,GAHrB,gBAGXS,EAHW,EAGXA,KACRV,EAAUU,GAJS,gDAMnBJ,EAAS,KAAMK,SANI,yBAQnBP,GAAa,GARM,4EAAH,qDAWpBI,EAAeP,EAChB,GAAE,CAACA,KAGF,gCACGE,IAAa,SAACS,EAAA,EAAD,IACbP,IAAS,8EACV,gBAAIQ,UAAWC,EAAf,UACGX,IAAa,SAACS,EAAA,EAAD,IACbP,IAAS,6EACTN,EAAOgB,OAAS,GACfhB,EAAOiB,KAAI,SAAAN,GACT,IAAQO,EAAsCP,EAAtCO,aAAcC,EAAwBR,EAAxBQ,KAAMC,EAAkBT,EAAlBS,UAAWlB,EAAOS,EAAPT,GACvC,OACE,gBAAaY,UAAWC,EAAxB,UACGM,QAAQH,KACP,gBACEJ,UAAWC,EACXO,IAAG,UAtCP,kCAsCsBJ,GAClBK,IAAKJ,KAGT,eAAIL,UAAWC,EAAf,SAA8BI,KAC9B,eAAGL,UAAWC,EAAd,wBAA6CK,OATtClB,EAYZ,SAIV,C,+LCvDDsB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACdF,EAAAA,EAAAA,IAAA,sCAAyCC,IAD3B,cAC3BE,EAD2B,yBAE1BA,GAF0B,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAMC,GAAN,yFACRL,EAAAA,EAAAA,IAAA,8BACEK,EADF,oBACmBJ,IAFX,uBACvBE,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,sDAOjBG,EAAiB,mCAAG,WAAM5B,GAAN,yFACRsB,EAAAA,EAAAA,IAAA,iBAAoBtB,EAApB,oBAAkCuB,IAD1B,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBjB,EAAgB,mCAAG,WAAMR,GAAN,yFACPsB,EAAAA,EAAAA,IAAA,iBAAoBtB,EAApB,4BAA0CuB,IADnC,uBACtBE,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBI,EAAiB,mCAAG,WAAM7B,GAAN,yFACRsB,EAAAA,EAAAA,IAAA,iBAAoBtB,EAApB,4BAA0CuB,IADlC,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","service/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castContainer\":\"Cast_castContainer__NIXqj\",\"castImg\":\"Cast_castImg__T4WbF\",\"castCharacter\":\"Cast_castCharacter__Rliw1\",\"castName\":\"Cast_castName__-i08u\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieActors } from 'service/api';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'components/Loader/Loader';\nimport css from './Cast.module.css';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { id } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const getMovieActors = async () => {\n      try {\n        setIsLoading(true);\n        const { cast } = await fetchMovieActors(id);\n        setActors(cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieActors(id);\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Sorry, an error occurred! Please try again later!</p>}\n      <ul className={css.castList}>\n        {isLoading && <Loader />}\n        {error && <p>Sorry, an error occurred! Please try again later!</p>}\n        {actors.length > 0 &&\n          actors.map(cast => {\n            const { profile_path, name, character, id } = cast;\n            return (\n              <li key={id} className={css.castContainer}>\n                {Boolean(profile_path) && (\n                  <img\n                    className={css.castImg}\n                    src={`${IMG_URL + profile_path}`}\n                    alt={name}\n                  />\n                )}\n                <h4 className={css.castName}>{name}</h4>\n                <p className={css.castCharacter}>Character: {character}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  isLoading: PropTypes.bool,\n  error: PropTypes.string,\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '5d916df58dcec69f374b2e5893a8bbbf';\n\nexport const fetchTrendingMovies = async () => {\n  const data = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieActors = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n"],"names":["useState","actors","setActors","id","useParams","isLoading","setIsLoading","error","setError","useEffect","getMovieActors","fetchMovieActors","cast","message","Loader","className","css","length","map","profile_path","name","character","Boolean","src","alt","axios","API_KEY","fetchTrendingMovies","data","fetchMovieByQuery","query","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}